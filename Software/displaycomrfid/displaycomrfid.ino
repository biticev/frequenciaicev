//*******************************BIBLIOTECAS********************************
//ESP32----------------------------
#include <WiFi.h>
#include <HTTPClient.h>
#include <time.h>
//RFID-----------------------------
#include <SPI.h>
#include <MFRC522.h>
//OLED-----------------------------
#include <Wire.h>
#include <Adafruit_GFX.h>          //https://github.com/adafruit/Adafruit-GFX-Library
#include <Adafruit_SSD1306.h>      //https://github.com/adafruit/Adafruit_SSD1306

//*******************************DEFINIÇÃO DE PINOS*****************************************
//Pinos RFID-----------------------
#define SS_PIN  5 
#define RST_PIN 2
//Led RGB 1------------------------
#define LED1_R 27
#define LED1_G 26
#define LED1_B 25
//Led RGB 2------------------------
#define LED2_R 33
#define LED2_G 32
#define LED2_B 14
//Pino Buzzer Passivo--------------
#define BUZZ_PIN 13
//Pinos I2C para Display ----------
#define SCREEN_WIDTH 128 // OLED display largura, em pixels
#define SCREEN_HEIGHT 64 // OLED display altura, em pixels
#define OLED_RESET     0 

//*****************************INSTANCIAÇÃO*******************************************
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET); // cria instancia display
MFRC522 mfrc522(SS_PIN, RST_PIN); // cria instancia MFRC522.

//*****************************CREDENCIAIS*******************************************
const char *ssid = "coelho";
const char *password = "123456789";
const char* device_token  = "Modulo teste";

//*****************************API TEMPO & API RFID*******************************************
int timezone = -3 * 3600;   //Replace "x" your timezone.
int time_dst = 0;
String getData, Link;
String OldCardID = "";
unsigned long previousMillis1 = 0;
unsigned long previousMillis2 = 0;
String URL = "https://respt-api-rfid.onrender.com/frequencia";

//*************************ICONES DO DISPLAY*********************************
#define Wifi_start_width 54
#define Wifi_start_height 49
const uint8_t PROGMEM Wifi_start_bits[] = {
  0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x1f,0xf0,0x00,0x00,0x00
,0x00,0x03,0xff,0xff,0x80,0x00,0x00
,0x00,0x1f,0xf0,0x1f,0xf0,0x00,0x00
,0x00,0x7e,0x00,0x00,0xfc,0x00,0x00
,0x01,0xf0,0x00,0x00,0x1f,0x00,0x00
,0x03,0xc0,0x00,0x00,0x07,0xc0,0x00
,0x0f,0x00,0x00,0x00,0x01,0xe0,0x00
,0x1c,0x00,0x00,0x00,0x00,0x70,0x00
,0x38,0x00,0x07,0xc0,0x00,0x38,0x00
,0x70,0x00,0xff,0xfe,0x00,0x1e,0x00
,0xe0,0x03,0xfc,0x7f,0xc0,0x0e,0x00
,0x00,0x1f,0x80,0x03,0xf0,0x00,0x00
,0x00,0x3c,0x00,0x00,0x78,0x00,0x00
,0x00,0xf0,0x00,0x00,0x1c,0x00,0x00
,0x01,0xe0,0x00,0x00,0x0c,0x00,0x00
,0x03,0x80,0x00,0x00,0x00,0x00,0x00
,0x03,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x3f,0xf8,0x07,0x1e,0x00
,0x00,0x00,0xff,0xfe,0x1f,0xbf,0x80
,0x00,0x03,0xe0,0x04,0x7f,0xff,0xc0
,0x00,0x07,0x80,0x00,0xff,0xff,0xe0
,0x00,0x0e,0x00,0x00,0xff,0xff,0xe0
,0x00,0x0c,0x00,0x00,0x7f,0xff,0xc0
,0x00,0x00,0x00,0x00,0xfe,0x07,0xe0
,0x00,0x00,0x00,0x03,0xf8,0x03,0xf8
,0x00,0x00,0x07,0xe7,0xf9,0xf1,0xfc
,0x00,0x00,0x1f,0xe7,0xf1,0xf9,0xfc
,0x00,0x00,0x1f,0xe7,0xf3,0xf9,0xfc
,0x00,0x00,0x3f,0xe7,0xf3,0xf9,0xfc
,0x00,0x00,0x3f,0xe7,0xf1,0xf1,0xfc
,0x00,0x00,0x3f,0xe3,0xf8,0xe3,0xfc
,0x00,0x00,0x3f,0xf3,0xfc,0x07,0xf8
,0x00,0x00,0x1f,0xf0,0x7f,0x0f,0xc0
,0x00,0x00,0x0f,0xe0,0x7f,0xff,0xe0
,0x00,0x00,0x07,0xc0,0xff,0xff,0xe0
,0x00,0x00,0x00,0x00,0x7f,0xff,0xe0
,0x00,0x00,0x00,0x00,0x3f,0xff,0x80
,0x00,0x00,0x00,0x00,0x1f,0xbf,0x00
,0x00,0x00,0x00,0x00,0x03,0x18,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
#define Wifi_connected_width 63
#define Wifi_connected_height 49
const uint8_t PROGMEM Wifi_connected_bits[] = {
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x03,0xff,0xff,0x80,0x00,0x00
,0x00,0x00,0x3f,0xff,0xff,0xf8,0x00,0x00
,0x00,0x01,0xff,0xff,0xff,0xff,0x00,0x00
,0x00,0x0f,0xff,0xff,0xff,0xff,0xe0,0x00
,0x00,0x3f,0xff,0xc0,0x07,0xff,0xf8,0x00
,0x00,0xff,0xf8,0x00,0x00,0x3f,0xfe,0x00
,0x03,0xff,0x80,0x00,0x00,0x03,0xff,0x80
,0x07,0xfe,0x00,0x00,0x00,0x00,0xff,0xc0
,0x1f,0xf8,0x00,0x00,0x00,0x00,0x3f,0xf0
,0x3f,0xe0,0x01,0xff,0xff,0x00,0x0f,0xf8
,0x7f,0x80,0x0f,0xff,0xff,0xe0,0x03,0xfc
,0xff,0x00,0x7f,0xff,0xff,0xfc,0x01,0xfe
,0xfc,0x01,0xff,0xff,0xff,0xff,0x00,0x7e
,0x78,0x07,0xff,0xc0,0x07,0xff,0xc0,0x3c
,0x00,0x0f,0xfc,0x00,0x00,0x7f,0xe0,0x00
,0x00,0x1f,0xf0,0x00,0x00,0x1f,0xf0,0x00
,0x00,0x3f,0xc0,0x00,0x00,0x07,0xf8,0x00
,0x00,0x7f,0x00,0x01,0x00,0x01,0xfc,0x00
,0x00,0x7e,0x00,0x7f,0xfc,0x00,0xfc,0x00
,0x00,0x3c,0x03,0xff,0xff,0x80,0x78,0x00
,0x00,0x00,0x07,0xff,0xff,0xc0,0x00,0x00
,0x00,0x00,0x1f,0xff,0xff,0xf0,0x00,0x00
,0x00,0x00,0x3f,0xf0,0x1f,0xf8,0x00,0x00
,0x00,0x00,0x3f,0x80,0x03,0xf8,0x00,0x00
,0x00,0x00,0x3f,0x00,0x01,0xf8,0x00,0x00
,0x00,0x00,0x1c,0x00,0x00,0x70,0x00,0x00
,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x0f,0xe0,0x00,0x00,0x00
,0x00,0x00,0x00,0x1f,0xf0,0x00,0x00,0x00
,0x00,0x00,0x00,0x3f,0xf8,0x00,0x00,0x00
,0x00,0x00,0x00,0x3f,0xf8,0x00,0x00,0x00
,0x00,0x00,0x00,0x3f,0xf8,0x00,0x00,0x00
,0x00,0x00,0x00,0x3f,0xf8,0x00,0x00,0x00
,0x00,0x00,0x00,0x1f,0xf0,0x00,0x00,0x00
,0x00,0x00,0x00,0x0f,0xe0,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

//******************************CICLO INICIAL DE SETUP******************************************
void setup() {
  delay(1000);
  Serial.begin(115200);
  SPI.begin();  // Inicia SPI
  mfrc522.PCD_Init(); // Inicia RFID
  //-----------Inicia o OLED display-------------
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Loop infinito enquanto não iniciar
  }
  //------------Setando modo dos pinos-----------
  //Led 1------------------
  pinMode(LED1_R, OUTPUT); 
  pinMode(LED1_G, OUTPUT); 
  pinMode(LED1_B, OUTPUT);
  //Led 2------------------ 
  pinMode(LED2_R, OUTPUT);
  pinMode(LED2_G, OUTPUT); 
  pinMode(LED2_B, OUTPUT);  
  //Buzz ------------------
  pinMode(BUZZ_PIN, OUTPUT);
  // you can delet these three lines if you don't want to get the Adfruit logo appear
  //display.display();
  //delay(2000); // Pause for 2 seconds
  //display.clearDisplay();
  //---------------------------------------------
  connectToWiFi();
  //---------------------------------------------
  configTime(timezone, time_dst, "pool.ntp.org","time.nist.gov");
  //---------------------------------------------
  
}

//*****************************CICLO DE FUNCIONAMENTO NORMAL DO ESP32*******************************************
void loop() {
  // Checagem da conexão de wifi
  if(!WiFi.isConnected()){
    connectToWiFi();    //re-testagem da conexão de wifi
  }
  //---------------------------------------------
  if (millis() - previousMillis1 >= 1000) {
    previousMillis1 = millis();
    display.clearDisplay();
    
    time_t now = time(nullptr);
    struct tm* p_tm = localtime(&now);
    display.setTextSize(1);             // Normal 2:2 pixel scale
    display.setTextColor(WHITE);        // Draw white text
    display.setCursor(10,0);
    Serial.println(p_tm);
    display.setTextSize(4);             // Normal 2:2 pixel scale
    display.setTextColor(WHITE);        // Draw white text
    display.setCursor(0,21);
    if ((p_tm->tm_hour)<10) {display.print("0");display.print(p_tm->tm_hour);}
    else display.print(p_tm->tm_hour);
    display.print(":");
    if ((p_tm->tm_min)<10) {display.print("0");display.println(p_tm->tm_min);}
    else display.println(p_tm->tm_min);
    display.display();
  }
  //---------------------------------------------
  if (millis() - previousMillis2 >= 15000) {
    previousMillis2 = millis();
    OldCardID="";
  }
  delay(50);
  //---------------------------------------------
  //look for new card
  if ( ! (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial())) {
    return;//got to start of loop if there is no card present
  }

  LED("amarelo");

  String CardID ="";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? "0" : "");
    Serial.print(mfrc522.uid.uidByte[i], HEX);
    CardID += String(mfrc522.uid.uidByte[i], HEX);
  }
  Serial.println();
  //---------------------------------------------
  if( CardID == OldCardID ){
    return;
  }
  else{
    OldCardID = CardID;
  }
  //---------------------------------------------
//  Serial.println(CardID);
  //SendCardID(CardID);
  sendToServer(CardID);
  delay(1000);
  display.clearDisplay();
}
//************send the Card UID to the website*************
void sendToServer(String cardData) {
  Serial.println("Sending the Card ID");

  // Cria uma instância do cliente HTTP
  HTTPClient http;
  
  // Monta a URL completa do servidor com os dados do cartão
  String url = URL + "?cardData=" + cardData;
  
  // Envia a requisição GET para o servidor
  http.begin(url);
  int httpCode = http.GET();
  
  // Verifica o código de resposta HTTP
  if (httpCode > 0) {
    String payload = http.getString();
    Serial.println("Resposta do servidor: " + payload);
    if (payload.substring(1) == "1"){
      Serial.println("Aprovado");
      LED("verde");
      tone(BUZZ_PIN, 150);
      EscreverDisplay(payload);
      delay(1000);
      noTone(BUZZ_PIN);
      LED("branco");
    }
    else if (payload.substring(1) == "0"){
      Serial.println("Negado");
      LED("vermelho");
      tone(BUZZ_PIN, 255);
      EscreverDisplay(payload);
      delay(1000);
      noTone(BUZZ_PIN);
      LED("branco");
    }
    else {
      Serial.println("Nada");
      LED("vermelho");
      tone(BUZZ_PIN, 255);
      EscreverDisplay(payload);
      delay(2000);
      noTone(BUZZ_PIN);
      LED("branco");
    }
  } else {
    Serial.println("Falha na conexão com o servidor");
  }
  // Fecha a conexão HTTP
  http.end();
}

//********************Conectar na WiFi******************
void connectToWiFi(){
    WiFi.mode(WIFI_OFF);        //Prevents reconnection issue (taking too long to connect)
    delay(1000);
    WiFi.mode(WIFI_STA);
    Serial.print("Conectando a ");
    Serial.println(ssid);
    WiFi.begin(ssid, password);

    display.clearDisplay();
    display.setTextSize(1);             // Normal 1:1 pixel scale
    display.setTextColor(WHITE);        // Draw white text
    display.setCursor(0, 0);             // Start at top-left corner
    display.print(F("Conectando a \n"));
    display.setCursor(0, 50);   
    display.setTextSize(2);          
    display.print(ssid);
    display.drawBitmap( 73, 10, Wifi_start_bits, Wifi_start_width, Wifi_start_height, WHITE);
    display.display();
    
    while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
    }
    Serial.println("");
    Serial.println("Conectado");
    
    display.clearDisplay();
    display.setTextSize(2);             // Normal 1:1 pixel scale
    display.setTextColor(WHITE);        // Draw white text
    display.setCursor(8, 0);             // Start at top-left corner
    display.print(F("Conectado \n"));
    display.drawBitmap( 33, 15, Wifi_connected_bits, Wifi_connected_width, Wifi_connected_height, WHITE);
    display.display();
    
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());  //IP address assigned to your ESP
    
    delay(1000);
}

//********************Escrever Display******************
void EscreverDisplay(String payload){
  String nome = payload.substring(1);
  String materia =  payload.substring(2);
  display.clearDisplay();
  display.setTextSize(2);             // Normal 2:2 pixel scale
  display.setTextColor(WHITE);        // Draw white text
  display.setCursor(10,0);             // Start at top-left corner
  display.print(nome);
  display.setCursor(0,20);
  display.print(materia);
  display.display();
}

//********************Gerenciar LEDs******************
void LED(String cor){
  if(cor == "branco"){
    // Led 1
    analogWrite(LED1_R, 255);
    analogWrite(LED1_G, 255);
    analogWrite(LED1_B, 255);
    // Led 2
    analogWrite(LED2_R, 255);
    analogWrite(LED2_G, 255);
    analogWrite(LED2_B, 255);
  }
  else if (cor == "amarelo"){
    // Led 1
    analogWrite(LED1_R, 253);
    analogWrite(LED1_G, 241);
    analogWrite(LED1_B, 26);
    // Led 2
    analogWrite(LED2_R, 253);
    analogWrite(LED2_G, 241);
    analogWrite(LED2_B, 26);
  }
  else if (cor == "vermelho"){
    // Led 1
    digitalWrite(LED1_R, HIGH);
    digitalWrite(LED1_G, LOW);
    digitalWrite(LED1_B, LOW);
    // Led 2
    digitalWrite(LED2_R, HIGH);
    digitalWrite(LED2_G, LOW);
    digitalWrite(LED2_B, LOW);
  }
  else if (cor == "verde"){
    // Led 1
    digitalWrite(LED1_R, LOW);
    digitalWrite(LED1_G, HIGH);
    digitalWrite(LED1_B, LOW);
    // Led 2
    digitalWrite(LED2_R, LOW);
    digitalWrite(LED2_G, HIGH);
    digitalWrite(LED2_B, LOW);
  }
}
//=======================================================================